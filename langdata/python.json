{
  "name": "Python",
  "slug": "python",
  "version": "3.x",
  "quick_start": [
    {"title": "Install Python", "description": "Install from python.org or using your OS package manager.", "code": "# macOS (Homebrew)\nbrew install python\n\n# Ubuntu\nsudo apt-get update && sudo apt-get install -y python3 python3-pip\n\n# Windows\n# Download installer from https://www.python.org/downloads/"},
    {"title": "Hello, World", "description": "Create a script and run it.", "code": "print('Hello, world!')\n\n# Run\n# python3 hello.py"},
    {"title": "Virtual environment + pip", "description": "Isolate dependencies per project.", "code": "python3 -m venv .venv\nsource .venv/bin/activate  # Windows: .venv\\Scripts\\activate\npip install requests"}
  ],
  "common_tasks": [
    {"group": "I/O", "tasks": [
      {"title": "Read a text file", "description": "Open and read file contents.", "code": "from pathlib import Path\ntext = Path('README.md').read_text(encoding='utf-8')\nprint(text[:200])"},
      {"title": "Write JSON", "description": "Serialize a dict to JSON file.", "code": "import json\ndata = {'ok': True, 'items': [1,2,3]}\nwith open('data.json', 'w', encoding='utf-8') as f:\n    json.dump(data, f, indent=2)"}
    ]},
    {"group": "HTTP + APIs", "tasks": [
      {"title": "GET JSON", "description": "Fetch and parse JSON.", "code": "import requests\nr = requests.get('https://httpbin.org/json', timeout=10)\nr.raise_for_status()\nprint(r.json())"}
    ]},
    {"group": "CLI", "tasks": [
      {"title": "Arguments", "description": "Parse command-line args.", "code": "import argparse\nparser = argparse.ArgumentParser()\nparser.add_argument('--name', default='world')\nprint(f'Hello {parser.parse_args().name}!')"}
    ]}
  ],
  "stdlib": [
    {"name": "os", "description": "Miscellaneous operating system interfaces."},
    {"name": "sys", "description": "System-specific parameters and functions."},
    {"name": "pathlib", "description": "Object-oriented filesystem paths."},
    {"name": "json", "description": "JSON encoder and decoder."},
    {"name": "re", "description": "Regular expression operations."},
    {"name": "datetime", "description": "Basic date and time types."},
    {"name": "subprocess", "description": "Subprocess management."},
    {"name": "typing", "description": "Support for type hints."}
  ],
  "tools": ["Interpreter (python3)", "pip", "venv", "pytest", "black", "mypy"],
  "links": [
    {"title": "Official docs", "url": "https://docs.python.org/3/"},
    {"title": "PyPI", "url": "https://pypi.org/"},
    {"title": "PEP 8 (Style Guide)", "url": "https://peps.python.org/pep-0008/"}
  ],
  "builtins": [
    {"name": "abs", "kind": "function", "signature": "abs(x)", "description": "Return the absolute value of a number.", "category": "Numeric & Math"},
    {"name": "all", "kind": "function", "signature": "all(iterable)", "description": "Return True if all elements of the iterable are true.", "category": "Iteration & Functional"},
    {"name": "any", "kind": "function", "signature": "any(iterable)", "description": "Return True if any element of the iterable is true.", "category": "Iteration & Functional"},
    {"name": "ascii", "kind": "function", "signature": "ascii(obj)", "description": "Return a printable representation with non-ASCII replaced by escapes.", "category": "Conversion & Formatting"},
    {"name": "bin", "kind": "function", "signature": "bin(x)", "description": "Convert an integer to a binary string prefixed with '0b'.", "category": "Conversion & Formatting"},
    {"name": "bool", "kind": "type", "signature": "bool([x])", "description": "Truth value testing and Boolean operations.", "category": "Types"},
    {"name": "bytearray", "kind": "type", "signature": "bytearray([source[, encoding[, errors]]])", "description": "Mutable sequence of bytes.", "category": "Types"},
    {"name": "bytes", "kind": "type", "signature": "bytes([source[, encoding[, errors]]])", "description": "Immutable sequence of bytes.", "category": "Types"},
    {"name": "callable", "kind": "function", "signature": "callable(obj)", "description": "Return True if the object appears callable.", "category": "Introspection"},
    {"name": "chr", "kind": "function", "signature": "chr(i)", "description": "Return the string representing a Unicode code point.", "category": "Conversion & Formatting"},
    {"name": "classmethod", "kind": "decorator", "signature": "classmethod(function)", "description": "Transform a method into a class method.", "category": "OOP"},
    {"name": "compile", "kind": "function", "signature": "compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)", "description": "Compile source into a code object.", "category": "Runtime & Exec"},
    {"name": "complex", "kind": "type", "signature": "complex([real[, imag]])", "description": "Create a complex number.", "category": "Types"},
    {"name": "dict", "kind": "type", "signature": "dict(**kwargs)", "description": "Create a new dictionary.", "category": "Types"},
    {"name": "dir", "kind": "function", "signature": "dir([object])", "description": "List attributes of object or current scope.", "category": "Introspection"},
    {"name": "divmod", "kind": "function", "signature": "divmod(a, b)", "description": "Pair of (a // b, a % b).", "category": "Numeric & Math"},
    {"name": "enumerate", "kind": "function", "signature": "enumerate(iterable, start=0)", "description": "Return an enumerate object.", "category": "Iteration & Functional"},
    {"name": "eval", "kind": "function", "signature": "eval(expression, globals=None, locals=None)", "description": "Evaluate the expression string.", "category": "Runtime & Exec"},
    {"name": "exec", "kind": "function", "signature": "exec(object, globals=None, locals=None)", "description": "Execute dynamically created program.", "category": "Runtime & Exec"},
    {"name": "filter", "kind": "function", "signature": "filter(function, iterable)", "description": "Construct an iterator from elements where function returns true.", "category": "Iteration & Functional"},
    {"name": "float", "kind": "type", "signature": "float([x])", "description": "Create a floating point number.", "category": "Types"},
    {"name": "format", "kind": "function", "signature": "format(value[, format_spec])", "description": "Format a value using a format spec.", "category": "Conversion & Formatting"},
    {"name": "frozenset", "kind": "type", "signature": "frozenset([iterable])", "description": "Immutable set.", "category": "Types"},
    {"name": "getattr", "kind": "function", "signature": "getattr(object, name[, default])", "description": "Get attribute by name.", "category": "Introspection"},
    {"name": "globals", "kind": "function", "signature": "globals()", "description": "Return the global symbol table as a dict.", "category": "Runtime & Exec"},
    {"name": "hasattr", "kind": "function", "signature": "hasattr(object, name)", "description": "Return whether object has attribute.", "category": "Introspection"},
    {"name": "hash", "kind": "function", "signature": "hash(obj)", "description": "Return the hash value of the object.", "category": "Introspection"},
    {"name": "help", "kind": "function", "signature": "help([object])", "description": "Invoke the built-in help system.", "category": "Introspection"},
    {"name": "hex", "kind": "function", "signature": "hex(x)", "description": "Convert int to hex string prefixed with '0x'.", "category": "Conversion & Formatting"},
    {"name": "id", "kind": "function", "signature": "id(object)", "description": "Return the identity of an object.", "category": "Introspection"},
    {"name": "input", "kind": "function", "signature": "input([prompt])", "description": "Read a line from input.", "category": "I/O"},
    {"name": "int", "kind": "type", "signature": "int([x[, base]])", "description": "Create an integer from a number or string.", "category": "Types"},
    {"name": "isinstance", "kind": "function", "signature": "isinstance(obj, class_or_tuple)", "description": "Check objectâ€™s type.", "category": "Introspection"},
    {"name": "issubclass", "kind": "function", "signature": "issubclass(cls, class_or_tuple)", "description": "Check class inheritance.", "category": "Introspection"},
    {"name": "iter", "kind": "function", "signature": "iter(object[, sentinel])", "description": "Return an iterator object.", "category": "Iteration & Functional"},
    {"name": "len", "kind": "function", "signature": "len(s)", "description": "Return the length of a container.", "category": "Iteration & Functional"},
    {"name": "list", "kind": "type", "signature": "list([iterable])", "description": "Create a list.", "category": "Types"},
    {"name": "locals", "kind": "function", "signature": "locals()", "description": "Return a dict of the current local symbol table.", "category": "Runtime & Exec"},
    {"name": "map", "kind": "function", "signature": "map(function, *iterables)", "description": "Apply function to items of iterables.", "category": "Iteration & Functional"},
    {"name": "max", "kind": "function", "signature": "max(iterable, *[, key, default])", "description": "Return the largest item.", "category": "Numeric & Math"},
    {"name": "min", "kind": "function", "signature": "min(iterable, *[, key, default])", "description": "Return the smallest item.", "category": "Numeric & Math"},
    {"name": "next", "kind": "function", "signature": "next(iterator[, default])", "description": "Retrieve the next item from an iterator.", "category": "Iteration & Functional"},
    {"name": "object", "kind": "type", "signature": "object()", "description": "Base type of all classes.", "category": "Types"},
    {"name": "oct", "kind": "function", "signature": "oct(x)", "description": "Convert int to octal string prefixed with '0o'.", "category": "Conversion & Formatting"},
    {"name": "open", "kind": "function", "signature": "open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)", "description": "Open file and return a file object.", "category": "I/O"},
    {"name": "ord", "kind": "function", "signature": "ord(c)", "description": "Return Unicode code point for a one-character string.", "category": "Conversion & Formatting"},
    {"name": "pow", "kind": "function", "signature": "pow(x, y[, z])", "description": "Return x**y or (x**y) % z if z provided.", "category": "Numeric & Math"},
    {"name": "print", "kind": "function", "signature": "print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)", "description": "Print objects to the text stream file.", "category": "I/O"},
    {"name": "property", "kind": "type", "signature": "property(fget=None, fset=None, fdel=None, doc=None)", "description": "Property attribute.", "category": "OOP"},
    {"name": "range", "kind": "type", "signature": "range(start, stop[, step])", "description": "Immutable sequence of numbers.", "category": "Types"},
    {"name": "repr", "kind": "function", "signature": "repr(object)", "description": "Return a string containing a printable representation.", "category": "Conversion & Formatting"},
    {"name": "reversed", "kind": "function", "signature": "reversed(seq)", "description": "Return a reverse iterator.", "category": "Iteration & Functional"},
    {"name": "round", "kind": "function", "signature": "round(number[, ndigits])", "description": "Round to a given precision in decimal digits.", "category": "Numeric & Math"},
    {"name": "set", "kind": "type", "signature": "set([iterable])", "description": "Create a new set object.", "category": "Types"},
    {"name": "setattr", "kind": "function", "signature": "setattr(object, name, value)", "description": "Set attribute on object.", "category": "Introspection"},
    {"name": "slice", "kind": "type", "signature": "slice(stop) | slice(start, stop[, step])", "description": "Slice object.", "category": "Types"},
    {"name": "sorted", "kind": "function", "signature": "sorted(iterable, /, *, key=None, reverse=False)", "description": "Return a new sorted list.", "category": "Iteration & Functional"},
    {"name": "staticmethod", "kind": "decorator", "signature": "staticmethod(function)", "description": "Transform a method into a static method.", "category": "OOP"},
    {"name": "str", "kind": "type", "signature": "str(object='')", "description": "String type.", "category": "Types"},
    {"name": "sum", "kind": "function", "signature": "sum(iterable, /, start=0)", "description": "Sum start and the items of an iterable.", "category": "Numeric & Math"},
    {"name": "super", "kind": "type", "signature": "super([type[, object-or-type]])", "description": "Return a proxy object that delegates method calls.", "category": "OOP"},
    {"name": "tuple", "kind": "type", "signature": "tuple([iterable])", "description": "Immutable sequence.", "category": "Types"},
    {"name": "type", "kind": "type", "signature": "type(object) | type(name, bases, dict)", "description": "Return type or create a new type.", "category": "Introspection"},
    {"name": "vars", "kind": "function", "signature": "vars([object])", "description": "Return __dict__ of object.", "category": "Introspection"},
    {"name": "zip", "kind": "function", "signature": "zip(*iterables, strict=False)", "description": "Aggregate elements from iterables.", "category": "Iteration & Functional"}
  ]
}
