{
  "name": "C",
  "slug": "c",
  "version": "C17",
  "quick_start": [
    {
      "title": "Install compiler",
      "description": "Use clang or gcc.",
      "code": "clang --version\n# or\ngcc --version"
    },
    {
      "title": "Hello, World",
      "description": "Compile and run.",
      "code": "#include <stdio.h>\nint main(){ printf(\"Hello, world!\\n\"); return 0; }\n\n// Save as hello.c then:\n// cc hello.c -o hello && ./hello"
    }
  ],
  "common_tasks": [
    {
      "group": "Files & Data",
      "tasks": [
        {
          "title": "Read file",
          "description": "fopen/fread",
          "code": "#include <stdio.h>\nint main(){ FILE *f=fopen(\"README.md\", \"rb\"); if(!f) return 1; char buf[201]={0}; fread(buf,1,200,f); fclose(f); puts(buf); }"
        },
        {
          "title": "Write JSON (string)",
          "description": "fopen/fputs",
          "code": "#include <stdio.h>\nint main(){ FILE *f=fopen(\"data.json\", \"wb\"); fputs(\"{\\\"ok\\\":true}\", f); fclose(f); }"
        }
      ]
    },
    {
      "group": "HTTP + APIs",
      "tasks": [
        {
          "title": "HTTP (curl CLI)",
          "description": "Call out to curl.",
          "code": "system(\"curl -s https://httpbin.org/json\");"
        }
      ]
    },
    {
      "group": "Env & Config",
      "tasks": [
        {
          "title": "Read env",
          "description": "getenv",
          "code": "#include <stdio.h>\n#include <stdlib.h>\nint main(){ const char* p=getenv(\"PORT\"); printf(\"%s\\n\", p? p: \"8000\"); }"
        }
      ]
    }
  ],
  "projects": [
    {
      "title": "To-Do CLI",
      "summary": "Append/list tasks in todo.txt.",
      "description": "Simple file I/O.",
      "steps": [
        {
          "title": "main.c",
          "code": "#include <stdio.h>\n#include <string.h>\nint main(int argc, char**argv){ const char* cmd=argc>1?argv[1]:\"list\"; if(strcmp(cmd,\"add\")==0 && argc>2){ FILE*f=fopen(\"todo.txt\",\"a\"); fputs(argv[2],f); fputc('\n',f); fclose(f);} else if(strcmp(cmd,\"list\")==0){ FILE*f=fopen(\"todo.txt\",\"r\"); if(f){ int c; while((c=fgetc(f))!=EOF) putchar(c); fclose(f);} } else puts(\"usage: add <text> | list\"); }"
        }
      ]
    },
    {
      "title": "Web Fetcher",
      "summary": "Download JSON to disk.",
      "description": "curl via system",
      "steps": [
        {
          "title": "main.c",
          "code": "#include <stdlib.h>\nint main(){ system(\"mkdir -p out && curl -s https://httpbin.org/json > out/data.json\"); return 0; }"
        }
      ]
    }
  ],
  "glossary": [
    {
      "term": "Pointer",
      "definition": "Variable that stores a memory address."
    },
    {
      "term": "Array",
      "definition": "Contiguous sequence of elements of the same type."
    }
  ],
  "tips": [
    {
      "title": "Compile flags",
      "note": "Enable warnings: -Wall -Wextra and pick a standard like -std=c17."
    },
    {
      "title": "Memory",
      "note": "Always check malloc/fopen return values; free/close resources."
    }
  ],
  "stdlib": [
    {
      "name": "stdio.h",
      "description": "I/O"
    },
    {
      "name": "stdlib.h",
      "description": "Memory, conversions"
    },
    {
      "name": "string.h",
      "description": "Strings"
    }
  ],
  "tools": [
    {
      "name": "clang",
      "description": "LLVM C compiler"
    },
    {
      "name": "gcc",
      "description": "GNU C compiler"
    }
  ],
  "links": [
    {
      "title": "C Reference",
      "url": "https://en.cppreference.com/w/c"
    }
  ],
  "builtins": [
    {
      "name": "printf",
      "kind": "function",
      "signature": "int printf(const char *fmt, ...)",
      "description": "Formatted output."
    },
    {
      "name": "malloc",
      "kind": "function",
      "signature": "void *malloc(size_t size)",
      "description": "Allocate memory."
    }
  ],
  "concepts": []
}