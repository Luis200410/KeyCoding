{
  "name": "Zig",
  "slug": "zig",
  "version": "0.12+",
  "quick_start": [
    {
      "title": "Install Zig",
      "description": "Download from ziglang.org or use a package manager.",
      "code": "zig version"
    },
    {
      "title": "Hello, World",
      "description": "Compile and run.",
      "code": "const std = @import(\"std\");\npub fn main() !void {\n  try std.io.getStdOut().writer().print(\"Hello, world!\\n\", .{});\n}"
    }
  ],
  "common_tasks": [
    {
      "group": "Files & Data",
      "tasks": [
        {
          "title": "Read a file",
          "description": "Read an entire file into memory.",
          "code": "const std = @import(\"std\");\npub fn main() !void {\n  const gpa = std.heap.page_allocator;\n  const data = try std.fs.cwd().readFileAlloc(gpa, \"README.md\", 1 << 20);\n  defer gpa.free(data);\n  try std.io.getStdOut().writer().print(\"{s}\", .{data[0..@min(200, data.len)]});\n}"
        },
        {
          "title": "Write JSON",
          "description": "Write a JSON string.",
          "code": "const std = @import(\"std\");\npub fn main() !void { try std.fs.cwd().writeFile(\"data.json\", \"{\\\"ok\\\":true}\"); }"
        }
      ]
    },
    {
      "group": "CLI",
      "tasks": [
        {
          "title": "Arguments",
          "description": "Iterate argv.",
          "code": "const std = @import(\"std\");\npub fn main() !void {\n  var it = std.process.argsWithAllocator(std.heap.page_allocator);\n  defer it.deinit();\n  while (it.next()) |arg| { try std.io.getStdOut().writer().print(\"{s}\\n\", .{arg}); }\n}"
        }
      ]
    }
  ],
  "projects": [
    {
      "title": "To-Do CLI",
      "summary": "Append/list tasks in a text file.",
      "description": "Simple fs operations.",
      "steps": [
        {
          "title": "main.zig",
          "code": "const std = @import(\"std\");\npub fn main() !void { var gpa=std.heap.page_allocator; var args=std.process.argsWithAllocator(gpa); defer args.deinit(); const cmd = args.next() orelse \"list\"; if (std.mem.eql(u8, cmd, \"add\")) { const text = args.next() orelse return; var f = try std.fs.cwd().createFile(\"todo.txt\", .{ .truncate = false, .read = true, .mode = .{} }); defer f.close(); try f.seekFromEnd(0); try f.writer().print(\"{s}\\n\", .{text}); } else if (std.mem.eql(u8, cmd, \"list\")) { if (std.fs.cwd().openFile(\"todo.txt\", .{}) catch null) |f| { defer f.close(); const data = try f.readToEndAlloc(gpa, 1<<20); defer gpa.free(data); try std.io.getStdOut().writer().print(\"{s}\", .{data}); } } else { try std.io.getStdOut().writer().print(\"usage: add <text> | list\\n\", .{}); } }"
        }
      ]
    }
  ],
  "glossary": [
    {
      "term": "Allocator",
      "definition": "Interface that provides memory allocation/free functions."
    },
    {
      "term": "Error union",
      "definition": "Type T!E that may be a value or an error."
    }
  ],
  "tips": [
    {
      "title": "Build",
      "note": "Use zig build to manage build steps and targets."
    },
    {
      "title": "Safety",
      "note": "Prefer error unions and try/catch for robust error handling."
    }
  ],
  "stdlib": [
    {
      "name": "std",
      "description": "Core standard library"
    },
    {
      "name": "std.fs",
      "description": "Filesystem"
    },
    {
      "name": "std.io",
      "description": "I/O utilities"
    }
  ],
  "tools": [
    {
      "name": "zig",
      "description": "Compiler, builder, and package manager"
    }
  ],
  "links": [
    {
      "title": "Zig Documentation",
      "url": "https://ziglang.org/learn/"
    },
    {
      "title": "std docs",
      "url": "https://ziglang.org/documentation/"
    }
  ],
  "builtins": [
    {
      "name": "@import",
      "kind": "builtin",
      "signature": "@import(path)",
      "description": "Import a file or package."
    },
    {
      "name": "@min",
      "kind": "builtin",
      "signature": "@min(a, b)",
      "description": "Minimum of two values."
    },
    {
      "name": "@intFromFloat",
      "kind": "builtin",
      "signature": "@intFromFloat(T, x)",
      "description": "Convert float to integer type."
    }
  ],
  "concepts": []
}