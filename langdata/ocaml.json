{
  "name": "OCaml",
  "slug": "ocaml",
  "version": "5.x",
  "quick_start": [
    {
      "title": "Install opam",
      "description": "OCaml package manager.",
      "code": "opam --version"
    },
    {
      "title": "Hello, World",
      "description": "Compile and run.",
      "code": "print_endline \"Hello, world!\"\n(* Save as hello.ml then: ocamlc hello.ml -o hello && ./hello *)"
    }
  ],
  "common_tasks": [
    {
      "group": "Files & Data",
      "tasks": [
        {
          "title": "Read file",
          "description": "open_in + really_input_string",
          "code": "let ch = open_in \"README.md\" in let s = really_input_string ch 200 in print_endline s"
        },
        {
          "title": "Write JSON (string)",
          "description": "Output to file",
          "code": "let oc = open_out \"data.json\" in output_string oc \"{\\\"ok\\\":true}\"; close_out oc"
        }
      ]
    },
    {
      "group": "HTTP + APIs",
      "tasks": [
        {
          "title": "GET JSON (curl)",
          "description": "Sys.command",
          "code": "ignore (Sys.command \"curl -s https://httpbin.org/json > out.json\")"
        }
      ]
    },
    {
      "group": "Env & Config",
      "tasks": [
        {
          "title": "Read env",
          "description": "Sys.getenv_opt",
          "code": "match Sys.getenv_opt \"PORT\" with Some p -> print_endline p | None -> print_endline \"8000\""
        }
      ]
    }
  ],
  "projects": [
    {
      "title": "To-Do CLI",
      "summary": "Append/list tasks in todo.txt.",
      "description": "Simple file I/O.",
      "steps": [
        {
          "title": "main.ml",
          "code": "let () =\n  let cmd = if Array.length Sys.argv > 1 then Sys.argv.(1) else \"list\" in\n  if cmd = \"add\" && Array.length Sys.argv > 2 then\n    let oc = open_out_gen [Open_creat;Open_append;Open_text] 0o644 \"todo.txt\" in\n    output_string oc (Sys.argv.(2) ^ \"\\n\"); close_out oc\n  else if cmd = \"list\" then\n    if Sys.file_exists \"todo.txt\" then let ic = open_in \"todo.txt\" in really_input_string ic (in_channel_length ic) |> print_string; close_in ic\n  else print_endline \"usage: add <text> | list\""
        }
      ]
    },
    {
      "title": "Web Fetcher",
      "summary": "Download JSON to disk.",
      "description": "curl + write",
      "steps": [
        {
          "title": "main.ml",
          "code": "let () = ignore (Sys.command \"mkdir -p out && curl -s https://httpbin.org/json > out/data.json\"); print_endline \"saved to out/data.json\""
        }
      ]
    }
  ],
  "glossary": [
    {
      "term": "Option",
      "definition": "Optional value (Some x | None)."
    },
    {
      "term": "List",
      "definition": "Immutable linked list type."
    }
  ],
  "tips": [
    {
      "title": "Build",
      "note": "Use dune for builds and opam for packages."
    },
    {
      "title": "Types",
      "note": "Leverage type inference; add annotations when helpful."
    }
  ],
  "stdlib": [
    {
      "name": "Stdlib",
      "description": "Core library"
    }
  ],
  "tools": [
    {
      "name": "ocamlc",
      "description": "Compiler"
    },
    {
      "name": "dune",
      "description": "Build system"
    }
  ],
  "links": [
    {
      "title": "OCaml Manual",
      "url": "https://v2.ocaml.org/docs/"
    }
  ],
  "builtins": [
    {
      "name": "print_endline",
      "kind": "function",
      "signature": "string -> unit",
      "description": "Print with newline."
    }
  ],
  "concepts": []
}